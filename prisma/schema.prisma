// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User represents a single human being.
model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  siteRole      UserSiteRole @default(USER)
  // This stores the user's "active" Org, which controls which resources they
  // see when they are on various pages. This is a user preference, and does
  // not imply that the user actually has access to the listed Org.
  activeOrgId   Int?

  orgs      OrgUser[]
  activeOrg Org?      @relation(fields: [activeOrgId], references: [id])

  @@map("users")
}

// UserSiteRole dictates permissions outside of all orgs. ADMIN allows
// a user to add themselves to any org.
enum UserSiteRole {
  USER
  ADMIN
}

// Account represents a foreign credential (for example a Google user account),
// which is used to authenticate a User.
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

// Org is the main unit of resource isolation in Sierra. Most objects should be
// owned by an Org, and users have access to the Org through the OrgUser
// relation.
model Org {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  image     String?

  projects               Project[]
  searchEndpoints        SearchEndpoint[]
  users                  OrgUser[]
  // Prisma requires that all relations are bidirectional like this, even
  // though this relationship isn't useful to us.
  usersWithThisActiveOrg User[]
}

// OrgUser represents membership in an organization.
model OrgUser {
  id        Int         @id @default(autoincrement())
  userId    Int
  orgId     Int
  role      UserOrgRole @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  org  Org  @relation(fields: [orgId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, orgId])
}

// UserOrgRole dictates permissions of a user in a specific role.
enum UserOrgRole {
  USER
  ADMIN
}

// SearchEndpoint represents a remote datasource which can be queried.
model SearchEndpoint {
  id            Int                @id @default(autoincrement())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  orgId         Int
  name          String
  description   String
  whitelist     String[]
  resultId      String
  displayFields String[]
  type          SearchEndpointType
  info          Json

  org      Org       @relation(fields: [orgId], references: [id])
  projects Project[]
}

enum SearchEndpointType {
  ELASTICSEARCH
  OPEN_SEARCH
  SOLR
  VESPA
  REDIS_SEARCH
}

// A Project is a group of search phrases which are being optimized.
model Project {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orgId            Int
  searchEndpointId Int
  name             String

  judgements               Judgement[]
  org                      Org                        @relation(fields: [orgId], references: [id])
  queryTemplates           QueryTemplate[]
  rulesets                 Ruleset[]
  searchConfigurationLabel SearchConfigurationLabel[]
  searchEndpoint           SearchEndpoint             @relation(fields: [searchEndpointId], references: [id])
}

// A QueryTemplate is an immutable backend query that can be populated combined
// with a SearchPhrase to create a query which can be dispatched to a
// SearchEndpoint. Instead of modifying a QueryTemplate, a new one is created
// with a parentId equal to the original template. In this way, templates form
// a tree of edits.
model QueryTemplate {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projectId   Int
  parentId    Int?
  query       String
  knobs       Json
  // Short tag describing this QueryTemplate. Compare to a git branch.
  tag         String?
  // Longer description of the QueryTemplate. Compare to a git commit message.
  description String?

  children             QueryTemplate[]       @relation("QueryTemplateToQueryTemplate")
  parent               QueryTemplate?        @relation(fields: [parentId], references: [id])
  project              Project               @relation(fields: [projectId], references: [id])
  searchConfigurations SearchConfiguration[]
}

// A Judgement is a group of JudgementPhrases with a single owner. The owner
// could be a user, team, external datasource, or something else.
model Judgement {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId Int
  name      String

  phrases              JudgementPhrase[]
  project              Project                        @relation(fields: [projectId], references: [id])
  searchConfigurations JudgementSearchConfiguration[]
}

// A JudgementPhrase is a set of Votes for a single search phrase.
model JudgementPhrase {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  judgementId Int
  phrase      String

  judgement Judgement @relation(fields: [judgementId], references: [id])
  votes     Vote[]
  @@unique([judgementId, phrase])
}

// A Vote is a ranking for a particular (search phrase, document ID).
model Vote {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  judgementPhraseId Int
  documentId        String
  // Score is always stored in the range of [0, 1], and can be scaled in the
  // frontend to provide any arbitrary point scale.
  score             Float

  phrase JudgementPhrase @relation(fields: [judgementPhraseId], references: [id])
  @@unique([judgementPhraseId, documentId])
}

// A SearchConfiguration is a group of all settings that are required to
// execute a Project. Ideally, running the same SearchConfigurations multiple
// times would produce the same results. However, the data in the Judgements or the underlying
// data source might change, and so rerunning a SearchConfiguration later on
// might result in a different score.
model SearchConfiguration {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  queryTemplateId Int

  executions               Execution[]
  judgements               JudgementSearchConfiguration[]
  queryTemplate            QueryTemplate                  @relation(fields: [queryTemplateId], references: [id])
  rulesets                 RulesetVersion[]
  searchConfigurationLabel SearchConfigurationLabel[]
}

// A SearchConfigurationLabel allows us to assign a unique label per project to
// a SearchConfiguration.
model SearchConfigurationLabel {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  name                  String
  searchConfigurationId Int
  projectId             Int

  project             Project             @relation(fields: [projectId], references: [id])
  searchConfiguration SearchConfiguration @relation(fields: [searchConfigurationId], references: [id])
  @@unique([projectId, name])
}

// A JudgementSearchConfiguration links a SearchConfiguration to a Judgement.
model JudgementSearchConfiguration {
  id                    Int   @id @default(autoincrement())
  judgementId           Int
  searchConfigurationId Int
  weight                Float @default(1.0)

  judgement           Judgement           @relation(fields: [judgementId], references: [id])
  searchConfiguration SearchConfiguration @relation(fields: [searchConfigurationId], references: [id])
}

model Execution {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  searchConfigurationId Int
  // Meta tracks information about the datasource, like number of documents,
  // segments, shards; the index maapping; and so on.
  meta                  Json
  combinedScore         Float
  // { [ scorerId: string]: number }
  allScores             Json

  phrases             SearchPhraseExecution[]
  searchConfiguration SearchConfiguration     @relation(fields: [searchConfigurationId], references: [id])
}

// A SearchPhraseExecution is a single phrase which was executed and scored as
// part of an Execution.
model SearchPhraseExecution {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  executionId  Int
  phrase       String
  totalResults Int
  // The top results, [ document ID, ... ]
  results      Json
  // For Elasticsearch, it's the explanation of the query.
  explanation  Json
  combinedScore         Float
  // { [ scorerId: string]: number }
  allScores             Json

  execution Execution @relation(fields: [executionId], references: [id])
}

// A Ruleset stores information about a query rewriting ruleset.
model Ruleset {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId Int
  name      String

  project        Project          @relation(fields: [projectId], references: [id])
  rulesetVersion RulesetVersion[]
}

// RulesetVersion tracks a single version of the query rewriting ruleset.
// Instead of changing the value of a RulesetVersion, a new one is created with
// a parentId equal to the original RulesetVersion. In this way, rulesets form
// a tree of edits.
model RulesetVersion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rulesetId Int
  parentId  Int?
  value     Json

  children             RulesetVersion[]      @relation("RulesetVersionToRulesetVersion")
  parent               RulesetVersion?       @relation(fields: [parentId], references: [id])
  ruleset              Ruleset               @relation(fields: [rulesetId], references: [id])
  searchConfigurations SearchConfiguration[]
}
